buildscript {
	repositories {
		jcenter()
		maven {
			name = "forge"
			url = "http://files.minecraftforge.net/maven"
		}
		maven {
			name = "sonatype"
			url = "https://oss.sonatype.org/content/repositories/snapshots/"
		}
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
	}
}

plugins {
	id "net.minecraftforge.gradle.forge" version "2.0.2"
}


sourceCompatibility = 1.8
targetCompatibility = 1.8

version = version_major + '.' + version_minor + '.' + version_patch

def ENV = System.getenv()
if (ENV.BUILD_NUMBER) {
    version = version + "." + "${System.getenv().BUILD_NUMBER}"
}

group= "vswe.stevescarts" // http://maven.apache.org/guides/mini/guide-naming-conventions.html

minecraft {
    version = mcversion + "-" + forgeversion
    mappings = mcp_mappings
    runDir = "run"
    replace '${version}', project.version
}

repositories {
	maven {
		name = "ic2"
		url = "http://maven.ic2.player.to/"
	}
	maven {
		name = "Modmuss50"
		url = "http://maven.modmuss50.me/"
	}
}


dependencies {
	compile ('net.sengir.forestry:forestry_1.11.2:5.3.2.67:api'){
		transitive = false
	}
	deobfCompile ('RebornCore:RebornCore-1.11.2:+:universal'){
		transitive = false
	}
}

processResources{
	inputs.property "version", project.version
	inputs.property "mcversion", project.minecraft.version

	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'
		expand 'version': project.version, 'mcversion': project.minecraft.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude 'mcmod.info'
	}
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    exclude "**/*.psd"
    classifier = 'dev'
}

task apiJar(type: Jar) {
	from sourceSets.main.allSource
	from sourceSets.main.output
	include 'vswe/stevescarts/api/**/*'

	classifier = "api"
}

apiJar.mustRunAfter deobfJar

build.dependsOn deobfJar, apiJar

import groovy.util.XmlSlurper
import org.apache.commons.io.FileUtils

task curseTools << {
	def cacheFiles = new File(".gradle/curseTools")
	if (!cacheFiles.exists()) {
		cacheFiles.mkdirs()
	}

	def mavenMetadata = new File(cacheFiles, "maven-metadata.xml")

	logger.lifecycle(":downloading curseTools metadata")
	FileUtils.copyURLToFile(new URL("http://maven.modmuss50.me/CurseTools/CurseTools/maven-metadata.xml"), mavenMetadata)

	def metadata = new XmlSlurper().parseText(FileUtils.readFileToString(mavenMetadata))
	def curseToolsVersion = metadata.versioning.release

	def curseTools = new File(cacheFiles, "${curseToolsVersion}.jar")

	logger.lifecycle(":downloading CurseTools")
	FileUtils.copyURLToFile(new URL("http://maven.modmuss50.me/CurseTools/CurseTools/${curseToolsVersion}/CurseTools-${curseToolsVersion}.jar"), curseTools)

	logger.lifecycle(":launching CurseTools")
	ant.java(jar: curseTools.getAbsolutePath(), fork: true, spawn: false) {
		arg(value: jar.archivePath.getAbsolutePath())
		arg(value: deobfJar.archivePath.getAbsolutePath())
		arg(value: apiJar.archivePath.getAbsolutePath())
	}
}

task signJar(type: SignJar, dependsOn: reobfJar) {
	onlyIf {
		project.hasProperty('keyStore')
	}

	if (project.hasProperty('keyStore')) {
		keyStore = project.keyStore
		alias = project.keyStoreAlias
		storePass = project.keyStorePass
		keyPass = project.keyStoreKeyPass
		inputFile = jar.archivePath
		outputFile = jar.archivePath
	}

}

build.dependsOn signJar