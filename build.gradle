buildscript {
	repositories {
		jcenter()
		maven {
			name = "forge"
			url = "http://files.minecraftforge.net/maven"
		}
		maven {
			name = "sonatype"
			url = "https://oss.sonatype.org/content/repositories/snapshots/"
		}
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
	}
}

plugins {
	id "net.minecraftforge.gradle.forge" version "2.0.2"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

version = version_major + '.' + version_minor + '.' + version_patch

def ENV = System.getenv()
if (ENV.BUILD_NUMBER) {
    version = version + "." + "${System.getenv().BUILD_NUMBER}"
}

group= "vswe.stevescarts" // http://maven.apache.org/guides/mini/guide-naming-conventions.html

minecraft {
    version = mcversion + "-" + forgeversion
    mappings = mcp_mappings
    runDir = "run"
    replace '${version}', project.version
}

processResources{
	inputs.property "version", project.version
	inputs.property "mcversion", project.minecraft.version

	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'
		expand 'version': project.version, 'mcversion': project.minecraft.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude 'mcmod.info'
	}
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    exclude "**/*.psd"
    classifier = 'dev'
}

build.dependsOn deobfJar

//Thanks Matthew from #ForgeGradle https://gist.github.com/matthewprenger/108265e3efc83181bd2cc2d2fc31a853
task updateMappings(dependsOn: sourceJar) {

    def remapped = file('src_remapped/main/java')
    def methods = file('methods.csv')
    def fields = file('fields.csv')

    doLast {

        Map<String, String> map = new HashMap<>()
        methods.eachLine {line ->
            String[] pts = line.split(",")
            map.put(pts[0], pts[1])
        }
        fields.eachLine {line ->
            String[] pts = line.split(",")
            map.put(pts[0], pts[1])
        }

        copy {
            from zipTree(sourceJar.archivePath)
            into remapped
            include '**/*.java'

            filter { javaLine ->
                map.entrySet().each { entry ->
                    javaLine = javaLine.replace(entry.getKey(), entry.getValue())
                }
                return javaLine
            }

            includeEmptyDirs = false
            eachFile { println "Processing: $it.name" }
        }
    }
}